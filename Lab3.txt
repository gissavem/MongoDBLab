Task 1
Fråga 1:  Skapa en databas vid namn citydb.

Input: use citydb

Output: switched to db citydb

Fråga 2:  Sätt in följande dokument i en kollektion med namn: cities
          a. _id:1, name: Stockholm, population: 1372565
          b. _id:2, name: Göteborg, population: 549839
          c. _id:3, name: Malmö, population: 280415
          d. _id:4, name: Uppsala, population: 140454
          e. _id:5, name: Västerås, population: 110877


Input: db.cities.insert(
[
  {_id:1, name: "Stockholm", population: 1372565},
  {_id:2, name: "Göteborg", population: 549839},
  {_id:3, name: "Malmö", population: 280415},
  {_id:4, name: "Uppsala", population:140454},
  {_id:5, name: "Västerås", population: 110877}
])

Output: BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 5,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})



Fråga 3:  Hitta ett dokument där namnet är “Malmö” och visa bara “namn” och “population”.

Input: db.cities.find({"name": "Malmö"},{_id:0})

Output: { "name" : "Malmö", "population" : 280415 }


Fråga 4:  Uppdatera dokumentet som har “namn” “Göteborg” med “population” 549890


Input: db.cities.updateOne({"name":"Göteborg"},{$set: {"population":549890}})

Output:{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }


Fråga 5:  Ta bort dokumentet med _id:4

Input: db.cities.deleteOne({"_id":4})

Output: { "acknowledged" : true, "deletedCount" : 1 }


Fråga 6:  Uppdatera dokumentet som har “namn” “Västerås” och öka (med increment)
          ”population” fält så att det blir 110879. (increment by 2)

Input: db.cities.updateOne({"name":"Västerås"},{$inc:{"population":2}})

Output: { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }


Fråga 7:  Lägg till ett fält “country” och värdet “Sweden” till alla dokument.

Input: db.cities.update({},{$set: {country: "Sweden"}}, {multi: true})

Output: WriteResult({ "nMatched" : 4, "nUpserted" : 0, "nModified" : 4 })


Fråga 8:  Byt namn på fältet “country” till “Country”.

Input: db.cities.update({},{$rename: {"country": "Country"}}, {multi: true})

Output: WriteResult({ "nMatched" : 4, "nUpserted" : 0, "nModified" : 4 })

-----------------------------------------------------------------------
Task 2
Fråga 1:  Skapa en databas vid namn animalsdb.

Input: use animalsdb

Output: switched to db animalsdb


Fråga 2:  Gå till databasen animalsdb.

Input: use animalsdb

Output: switched to db animalsdb


Fråga 3:  Skriv i mongo-skalet : load ("animals.js"). Vad gör den raden? Visa resultatet.

Input: load ("C:/data/db/animals.js") efter att ha lagt in min plats i datorn och bytat \ till / laddar den in animals.js i animalsdb

Output: True


Fråga 4:  Hitta alla data från collection animals.

Input: db.animals.find()

Output:
{ "_id" : ObjectId("5e206b2a989e457ebcf063a0"), "name" : "Elephant", "color" : "grey", "weight" : 7000, "has_tusks" : true, "data" : [ "mammal", "herbivore", "live in groups" ], "found_in" : [ "sub-Saharan Africa", "South Asia", "Southeast Asia" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a1"), "name" : "Elk", "color" : "brown", "weight" : 395, "min_weight_male" : 320, "max_weight_male" : 475, "min_weight_female" : 275, "max_weight_female" : 375, "has_antlers" : true, "data" : [ "mammal", "deer family", "herbivore" ], "found_in" : [ "Canada", "Alaska", "New England", "Scandinavia", "Latvia", "Estonia", "Russia" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a2"), "name" : "Fox", "color" : "orange", "weight" : 6, "suborder" : "Caniformia", "class" : "Mammalia", "order" : "Carnivora", "family" : "Canidae", "data" : [ "mammal", "omnivore" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a3"), "name" : "Wolf", "class" : "Mammalia", "order" : "Carnivora", "suborder" : "Caniformia", "color" : "grey", "weight" : 44, "min_weight_male" : 43, "max_weight_male" : 45, "min_weight_female" : 36, "max_weight_female" : 38.5, "found_in" : [ "Eurasia", "North America" ], "data" : [ "mammal", "carnivore", "canid", "live in groups" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a4"), "name" : "Bear", "color" : "brown", "weight" : 505, "found_in" : [ "North America", "South America", "Europe", "Asia" ], "class" : "Mammalia", "order" : "Carnivora", "suborder" : "Caniformia", "family" : "Ursidae", "data" : [ "mammal", "carnivore", "nonretractile claws", "rounded ears", "can stand on its rear legs" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a5"), "name" : "Hyena", "family" : "Hyaenidae", "suborder" : "Feliformia", "order" : "Carnivora", "color" : "brown", "weight" : 47, "min_weight_male" : 40.5, "max_weight_male" : 55, "min_weight_female" : 44.5, "max_weight_female" : 63.9, "spotted" : true, "data" : [ "mammal", "carnivore", "live in groups" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a6"), "name" : "Orangutan", "alternative_name" : "Orangutang", "color" : "orange", "weight" : 75, "data" : [ "herbivore", "opposable thumbs", "opposable big toe", "eat fruits", "primate", "ape" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a7"), "name" : "Reindeer", "class" : "Mammalia", "color" : "grey", "weight" : 200, "alternative_name" : "caribou", "has_antlers" : true, "found_in" : [ "northern Europe", "Siberia", "North America" ], "data" : [ "mammal", "deer family", "herbivore", "live in groups" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a8"), "name" : "Gorilla", "color" : "black", "weight" : 155, "data" : [ "primate", "ape", "herbivore", "can stand on its rear legs", "live in groups" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063a9"), "name" : "Chimpanzee", "color" : "black", "weight" : 70, "data" : [ "primate", "ape", "omnivore" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063aa"), "name" : "Marten", "order" : "Carnivora", "suborder" : "Caniformia", "family" : "Mustelidae", "color" : "brown", "weight" : 1.5, "data" : [ "solitary animal" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063ab"), "name" : "Mongoose", "color" : "brown", "weight" : 1.7, "family" : "Herpestidae", "suborder" : "Feliformia", "order" : "Carnivora", "data" : [ "carnivore", "eat venomous snakes" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063ac"), "name" : "Meerkat", "found_in" : [ "Botswana", "Namibia", "Angola", "South Africa" ], "color" : "yellow", "family" : "Herpestidae", "suborder" : "Feliformia", "order" : "Carnivora", "weight" : 1, "data" : [ "can stand on its rear legs", "live in groups" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063ad"), "name" : "Lion", "color" : "yellow", "weight" : 200, "class" : "Mammalia", "order" : "Carnivora", "family" : "Felidae", "subfamily" : "Pantherinae", "suborder" : "Feliformia", "data" : [ "live in groups", "carnivore", "smaller than tigers", "protractible claws" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063ae"), "name" : "Raccoon", "color" : "gray", "weight" : 6, "suborder" : "Caniformia", "class" : "Mammalia", "order" : "Carnivora", "family" : "Procyonidae", "data" : [ "omnivore", "nocturnal", "plantigrade locomotion", "can stand on its rear legs" ] }
{ "_id" : ObjectId("5e206b2a989e457ebcf063af"), "name" : "Black panther", "class" : "Mammalia", "order" : "Carnivora", "family" : "Felidae", "subfamily" : "Pantherinae", "suborder" : "Feliformia", "color" : "black", "weight" : 60, "data" : [ "are leopards in Asia and Africa", "are black jaguars in the Americas", "big cat" ] }


Fråga 5:  Hitta hur många djur det finns totalt i databasen animals?

Input: db.animals.count()

Output: 16


Fråga 6:  Lägg till en array “favorit_food” med “blueberry, honey och ants” för “Bear” .

Input: db.animals.updateOne({name: "Bear"}, {$set: {favorit_food: ["honey", "ants"] }})

Output: { "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }


Fråga 7:  Ta bort ants och honey från arrayen “favorit_food” och “rounded ears” från arrayen “data” för “Bear”.

Input:

Output:


Fråga 8:  Hitta hur många gula djur det finns i kollektionen.

Input:

Output:

Fråga 9:  Hitta alla namnet på alla djur vars färg är brun och som lever i Asien och visa deras namn, color och found_in .

Input:

Output:


Fråga 10:   Lägg till fältet “litter_size” med värdet “4-6-kits” för “Fox”.

Input:

Output:


Fråga 11:   Lägg till ett fält med namn “likes meat” i arrayen “data” för alla med "order": "Carnivora" och som är gula till färgen.

Input:

Output:


Fråga 12:   Gruppera efter färger och visa antal djur per färg.

Input:

Output:


Fråga 13:   Skriv ut antalet djur som väger mer än 100.

Input:

Output:


Fråga 14:   Skriv ut djur med “order” “Carnivora”, sorterat efter weight i fallande ordning.

Input:

Output:


Fråga 15:   Hitta alla dokument som har “mammal” eller "carnivore" i deras “data” fält.

Input:

Output:


Fråga 16:   Hitta alla dokument som har “mammal” och "carnivore" i deras “data” fält.

Input:

Output:


-----------------------------------------------------------------------
Task 3
Fråga 1:  Sätt in följande record i kollektion orders: XXXXXX

Input:

Output:


Fråga 2:  Hitta alla dokument där fältet “Note” är “null” eller saknas .

Input:

Output:


Fråga 3:  Hitta alla dokument där fältet “Note” saknas.

Input:

Output:


Fråga 4:  Hitta alla dokument som har "Type": "Credit-Card" sorterat efter “Total” i stigande ordning.

Input:

Output:


Fråga 5:  Sortera all dokument efter Total i fallande ordning och visa bara dokument 2 och 3.

Input:

Output:


Fråga 6:  Aggregera “Success” och visa antal i fallande ordning. (Hur många “Success” är “true” och hur många är “false”).
          Exempel på hur svarsfilen för G-uppgiften ska se ut, formmässigt
          Namn: Johan Mongosson Task 1. Fråga 1.
          Skapa en databas vid namn fruits
          > <<här skriver du ditt mongo-kommand>>
          Switched to db fruits ← Detta är vad mongodb svarar! Skall vara med.
          Fråga 2. Skapa en collection vid namn “citrus”
          > <<här skriver du ditt mongo-kommando>>
          { "ok" : 1 } ← Detta är vad mongodb svarar, det ska du ta med i din fil.
          Fråga 3. Hitta alla dokument i collection “citrus”
          > <<här skriver du ditt mongo-kommando>>
          { "_id" : 1, "name" : "orange" } { "_id" : 2, "name" : "lemon" } osv...

Input:

Output:
